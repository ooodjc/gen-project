<template>
    <div class="edit-dialog">
        <el-dialog
            title="编辑"
            v-model="data.isEditDialog"
            width="30%"
            @close="closeEditDialog"
        >
            <el-form :model="data.editData" :rules="data.rules" ref="editForm" label-width="100px">
                <el-row :gutter="10">
#foreach($item in $data.table.columns)
#if($item.javaName != "id" && $item.isEdit)
                    <el-col :span="20">
                        <el-form-item label="${item.comment}" prop="${item.javaName}">
#if($item.componentType == "select" && $item.isEdit)
                            <el-select v-model="data.editData.${item.javaName}" placeholder="请选择${item.comment}">
                                <el-option
                                    v-for="item in ${item.javaName}Options"
                                    :key="item.value"
                                    :label="item.label"
                                    :value="item.value"
                                ></el-option>
                            </el-select>
#elseif($item.componentType == "radio" && !$item.isEdit)
                            <el-radio-group v-model="data.editData.${item.javaName}">
                                <el-radio :label="true">是</el-radio>
                                <el-radio :label="false">否</el-radio>
                            </el-radio-group>
#elseif($item.componentType == "switch" && !$item.isEdit)
                            <el-switch v-model="data.editData.${item.javaName}" active-value="true" inactive-value="false"></el-switch>
#elseif($item.componentType == "date" && !$item.isEdit)
                            <el-date-picker
                                v-model="data.editData.${item.javaName}"
                                type="date"
                                placeholder="选择日期"
                                value-format="yyyy-MM-dd"
                            ></el-date-picker>
#elseif($item.componentType == "datetime" && !$item.isEdit)
                            <el-date-picker
                                v-model="data.editData.${item.javaName}"
                                type="datetime"
                                placeholder="选择日期时间"
                                value-format="yyyy-MM-dd HH:mm:ss"
                            ></el-date-picker>
#elseif($item.componentType == "image" && !$item.isEdit)
                            <el-upload
                                class="avatar-uploader"
                                :action="data.baseURL+'file/upload'"
                                :headers="data.headers"
                                :show-file-list="false"
                                :on-success="${item.javaName}UploadSuccess"
                                :before-upload="${item.javaName}UploadBefore"
                            >
                                <img v-if="data.editData.${item.javaName}" :src="data.editData.${item.javaName}" class="avatar">
                                <i v-else class="el-icon-plus avatar-uploader-icon"></i>
                            </el-upload>
#else
                            <el-input v-model="data.editData.${item.javaName}" placeholder="请输入${item.comment}"></el-input>
#end
                        </el-form-item>
                    </el-col>
#end
#end
                </el-row>
                <el-form-item>
                    <el-row justify="end" style="margin-top: 20px; width: 100%;">
                        <el-button type="info" @click="closeEditDialog">取消</el-button>
                        <el-button type="primary" @click="edit(editForm)">提交</el-button>
                    </el-row>
                </el-form-item>
            </el-form>
        </el-dialog>
    </div>
</template>

<script setup>
import ${data.table.entityName}Api from '@/utils/api/${data.table.entityName}Api.js'
import { ElMessage } from 'element-plus'
import { storage } from '@/utils/storage'

const props = defineProps({
    //v-model
    modelValue: {
        type: String,
        default: '',
        required: false
    },
    editData: {
        type: Object,
        required: true
    }
})

const emit = defineEmits(['update:modelValue', 'editChange', 'closeChange'])

const data = reactive({
    isEditDialog: true,
    editData: {},
    rules: {
#foreach($item in $data.table.columns)
#if($item.javaName != "id")
        ${item.javaName}: [
            { required: true, message: '${item.comment}不能为空', trigger: 'blur' },
        ],
#end
#end
    },
#foreach($item in $data.table.columns)
#if($item.componentType == "select" && $item.isAdd)
    ${item.javaName}Options: [],
#end
#end
    baseURL: import.meta.env.VITE_APP_BASE_API,
    headers: {
        'X-Token': storage.get('token')
    }
})

const editForm = ref()

onMounted(() => {
    data.editData = props.editData
})

const closeEditDialog = () => {
    data.isEditDialog = false
    emit('closeChange', 'close')
}

const edit = async (formEl) => {
    if (!formEl) return
    await formEl.validate((valid, fields) => {
        if (valid) {
            //校验通过
            let editData = JSON.parse(JSON.stringify(data.editData))

            ${data.table.entityName}Api.update(editData).then((res) => {
                if (res.errno === 0) {
                    ElMessage.success('修改成功')
                    data.isAddDialog = false
                    emit('closeChange', 'edit')
                }
            })
        } else {
            //校验不通过
            console.log('error submit!', fields)
        }
    })
}
#foreach($item in $data.table.columns)
#if($item.componentType == "select" && $item.isEdit)
const get${item.javaName}Options = () => {
        ${data.table.entityName}Api.get${item.javaName}Options().then((res) => {
    if (res.errno === 0) {
      data.${item.javaName}Options = res.data
    }
  })
}
#elseif($item.componentType == "image" && $item.isEdit)
//${item.comment}上传成功
const ${item.javaName}UploadSuccess = (res) => {
  if (res.errno === 0) {
    data.addData.${item.javaName} = res.data
  }
}

//${item.comment}上传前校验
const ${item.javaName}UploadBefore = (file) => {
  const isJPG = file.type === 'image/jpeg'
  const isPNG = file.type === 'image/png'
  const isLt2M = file.size / 1024 / 1024 < 2

  if (!isJPG && !isPNG) {
    ElMessage.error('上传头像图片只能是 JPG/PNG 格式!')
  }
  if (!isLt2M) {
    ElMessage.error('上传头像图片大小不能超过 2MB!')
  }
  return (isJPG || isPNG) && isLt2M
}
#end
#end
</script>

<style scoped lang="scss"></style>