<template>
    <div class="content">
        <el-form inline label-width="70px"  class="demo-form-inline">
            <!-- 新增、删除、批量删除按钮 -->
            <el-form-item>
                <el-button type="primary" @click="showAddDialog">新增</el-button>
                <el-button type="danger" @click="deletes">批量删除</el-button>
            </el-form-item>
        </el-form>

        <el-table 
        v-loading="loading" 
        :data="dataList" 
        border
        :height="data.winHeight - 400"
        style="margin-top: 20px;"
        @selection-change="handleSelectionChange"
        >
            <!-- 多选框 -->
            <el-table-column type="selection" width="55" fixed="left"></el-table-column>
#foreach($item in $data.table.columns)
#if($item.javaName != "id")
            <el-table-column prop="${item.javaName}" label="${item.comment}" width="120px" />
#end
#end
            <el-table-column label="操作" width="180" fixed="right">
                <!-- 删除和编辑 -->
                <template #default="scope">
                    <el-button type="danger" @click="deleteItem(scope.row)">删除</el-button>
                    <el-button type="primary" @click="showEditDialog(scope.row)">编辑</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 分页 -->
        <div class="center2" style="margin-top: 20px;">
            <el-pagination 
            layout="pager" 
            :page-size="limit" 
            :total="total"
            :current-page="page"
            @current-change="setPage"
            />
        </div>
    </div>
</template>

<script setup>
import ${data.table.entityName}Api from '@/utils/api/${data.table.entityName}Api.js'
import { ElMessage } from 'element-plus'

const props = defineProps({
    modelValue: {
        type: String,
        default: '',
        required: false
    },
    dataList: {
        type: Array,
        required: true
    },
    loading: {
        type: Boolean,
        required: true
    },
    limit: {
        type: Number,
        required: true
    },
    total: {
        type: Number,
        required: true
    },
    page: {
        type: Number,
        required: true
    }
})

const emit = defineEmits(['update:modelValue', 'change', 'page-change', 'edit', 'add'])

const data = reactive({
    selectedList: [],
    winHeight: document.documentElement.clientHeight || document.body.clientHeight,
})

const setPage = (page) => {
    emit('page-change', page)
}

const showAddDialog = () => {
    emit('add')
}

const showEditDialog = (row) => {
    emit('edit', row)
}

const deleteItem = (row) => {
    let editData = JSON.parse(JSON.stringify(row))
    ${data.table.entityName}Api.delete(editData).then(res => {
        if (res.errno === 0) {
            ElMessage.success('删除成功')
            emit('page-change', props.page)
        } else {
            ElMessage.error(res.data.msg)
        }
    })
}

const handleSelectionChange = (val) => {
    data.selectedList = val
}

const deletes = () => {
    if (data.selectedList.length === 0) {
        ElMessage.error('请选择要删除的商品')
        return
    }
    ${data.table.entityName}Api.deletes(data.selectedList).then(res => {
        if (res.errno === 0) {
            ElMessage.success('删除成功')
            emit('page-change', props.page)
        } else {
            ElMessage.error(res.data.msg)
        }
    })
}
</script>

<style scoped lang="scss">
.content{
    background-color: #fff;
    margin-top: 20px;
    padding: 10px;
}
.demo-form-inline {
    .el-form-item{
        margin-bottom: 0;
    }
}
</style>